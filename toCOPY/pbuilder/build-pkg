#!/bin/bash
# Deb Builder script.

set -e

#we covered /etc/pbuilderrc and try to use the default config
#so below may should not pass to cowbuilder command
DISTRIBUTION="bullseye"
ARCHITECTURE="amd64"
[ -z ${MY_WORKSPACE} ] && {
    source ${HOME}/buildrc
}
BASEDIRECTORY="${MY_WORKSPACE}/build-root/builder/"
COWBASEFILE="${BASEDIRECTORY}/pbuilder/base.cow"
MIRROR=ftp.debian.org
ROOTCMD=sudo

AVOIDLIST="${BASEDIRECTORY}/AVOID.LST"
NOBUILDDEP=${BASEDIRECTORY}/FAILED/NOBUILDDEP
FAILED=${BASEDIRECTORY}/FAILED
DEPWAIT=${BASEDIRECTORY}/DEPWAIT
SUCCESS=${BASEDIRECTORY}/SUCCESS

mkdir -p ${BASEDIRECTORY}/{FAILED,DEPWAIT,SUCCESS,WORKING,STATUS}
mkdir -p "$NOBUILDDEP" || true

STATUSFILE=${BASEDIRECTORY}/STATUS/$(hostname)-$$
BUILDTMP=${BASEDIRECTORY}/tmp-b-$(hostname)-$$

function usage () {
    echo
    echo "Usage:"
    echo "$0 [Options] --init"
    echo
}

function status () {
    echo "$@" > $STATUSFILE
    echo "$@"
}

function buildone() {
    local PROGNAME="$1"
    local LOGFILE=${BASEDIRECTORY}/WORKING/"$PROGNAME.log"

    status "building $PROGNAME"
    mkdir $BUILDTMP || true
    (
	cd $BUILDTMP
	#Source from: deb_path? {a.source deb b.git url c.tar from download}
	# make sure that the deb-src has been enabled in build container
	apt-get source -d $PROGNAME
	if ${ROOTCMD} cowbuilder --build --logfile "$LOGFILE" *.dsc; then
	    mv "$LOGFILE" "$SUCCESS"
	    echo Build successful
	else
	    if grep "^E: pbuilder: Could not satisfy build-dependency." $LOGFILE > /dev/null; then
		mv "$LOGFILE" "$DEPWAIT"
		echo Dependency cannot be satisfied.
	    elif [ $(awk '/ -> Attempting to parse the build-deps/,/^ -> Finished parsing the build-deps/{print $0}' $LOGFILE | wc -l ) = "2" ]; then
		echo "Missing build-deps"
		mv "$LOGFILE" "$NOBUILDDEP"
	    elif grep '^E: Could not satisfy build-dependency' "$LOGFILE" > /dev/null ; then
		echo "Build-dep wait" 
		mv "$LOGFILE" "$DEPWAIT"
	    elif grep '^E: pbuilder-satisfydepends failed.' "$LOGFILE" > /dev/null ; then
		echo "Build-dep satisfaction failed on other package's installation"
		mv "$LOGFILE" "$DEPWAIT"
	    else
		mv "$LOGFILE" "$FAILED"
		echo Build failed
	    fi
	fi
    )
    status "finished building $PROGNAME"
    rm -rf $BUILDTMP;
}

#$ROOTCMD dselect update
#$ROOTCMD pbuilder update 

if [ ! -f "./.cowlock" ]; then
    echo "Try to clean the old base.cow."
    [ -f ${COWBASEFILE} ] && sudo rm ${COWBASEFILE}
    ${ROOTCMD} cowbuilder --create
    [ $? == 0 ] && touch ./.cowlock;
fi

for A in dnsmasq; do
    # this part needs to be atomic
    status "considering $A"
    if grep "^$A$" $AVOIDLIST; then
	echo Skip.
	continue
    fi
    if echo "$A" | grep "^kernel-image"; then
    	echo I hate kernel images.
	continue
    fi

    if [ $(find ${BASEDIRECTORY} -name $A.log | wc -l ) = "1" ]; then
	echo Already build tried for "$A"
	continue
    fi
    # end of atomic.
    buildone $A
done
